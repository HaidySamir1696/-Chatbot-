{"data":[{"title":"HyperBus","paragraphs":[{"context":"Document Number: 001-99253 Rev. *B Page 8 of 47","qas":[]},{"context":"2. HyperBus Signal Descriptions","qas":[]},{"context":"2.1 Input/Output Summary\nHyperBus has a mandatory set of signals as well as optional signals that are supported by some but not all HyperBus compatible \ndevices. Active Low signal names have a hash symbol (#) suffix.","qas":[]},{"context":"Table 2.1  Mandatory I/O Summary","qas":[]},{"context":"Symbol Type Description","qas":[]},{"context":"Symbol: 'CS#', Type: 'Master Output,  Slave Input', Description: 'Chip Select. Bus transactions are initiated with a High to Low transition. Bus transactions are terminated  with a Low to High transition. The master device has a separate CS# for each slave.'","qas":[{"question":"What is the description of chip select?","id":"ded122c9-c20d-4c36-a675-37e4d5a03b08","answers":[{"answer_start":66,"text":"Chip Select. Bus transactions are initiated with a High to Low transition. Bus transactions are terminated  with a Low to High transition. The master device has a separate CS# for each slave."}]},{"question":"What is the description of CS#?","id":"a9b6870e-3be3-4e51-949a-f50236a194c3","answers":[{"answer_start":66,"text":"Chip Select. Bus transactions are initiated with a High to Low transition. Bus transactions are terminated  with a Low to High transition. The master device has a separate CS# for each slave."}]},{"question":"What is the type of chip select?","id":"8c4c698f-2c6c-4845-aee3-43d8b92c40ee","answers":[{"answer_start":22,"text":"Master Output,  Slave Input"}]}]},{"context":"Symbol: 'CK, CK#', Type: 'Master Output,  Slave Input', Description: 'Differential Clock. Command, address, and data information is output with respect to the crossing of the CK  and CK# signals. Differential clock is used on 1.8V I/O devices. Single Ended Clock. CK# is not used on 3.0V devices, only a single ended CK is used.  The clock is not required to be free-running.'","qas":[{"question":"What is the type of clock signal?","id":"5dfb0296-eb09-4159-bf30-ce52a52eeaaa","answers":[{"answer_start":26,"text":"Master Output,  Slave Input"}]},{"question":"What is the type of CK#?","id":"d0653697-b01d-4feb-b291-df3ccd192efe","answers":[{"answer_start":26,"text":"Master Output,  Slave Input"}]},{"question":"What is the description of clock?","id":"08a5fd57-3180-4a7e-9619-0dc0832c5aab","answers":[{"answer_start":70,"text":"Differential Clock. Command, address, and data information is output with respect to the crossing of the CK  and CK# signals. Differential clock is used on 1.8V I/O devices. Single Ended Clock. CK# is not used on 3.0V devices, only a single ended CK is used.  The clock is not required to be free-running."}]}]},{"context":"Symbol: 'DQ[7:0]', Type: 'Input/Output', Description: 'Data Input/Output. Command, Address, and Data information is transferred on these signals during Read  and Write transactions.'","qas":[{"question":"What is the type of data signal?","id":"86b03b4d-5871-4934-91bd-831760f3d2e8","answers":[{"answer_start":25,"text":"'Input/Output"}]},{"question":"What is the type of DQ[7:0]?","id":"fd60abed-4a68-4419-91e2-5193dbb23aa6","answers":[{"answer_start":25,"text":"'Input/Output"}]},{"question":"Send me the description of data signal","id":"d8a3dd5b-e01f-41a4-ba07-3d51c56f2e55","answers":[{"answer_start":55,"text":"Data Input/Output. Command, Address, and Data information is transferred on these signals during Read  and Write transactions."}]}]},{"context":"Symbol: 'RWDS', Type: 'Input/Output', Description: 'Read Write Data Strobe. During the Command/Address portion of all bus transactions RWDS is a slave  output and indicates whether additional initial latency is required. Slave output during read data transfer, data  is edge aligned with R WDS. Slave input during data transfer in write transactions to function as a data mask.  (High = additional latency, Low = no additional latency).'","qas":[{"question":"What is the type of read write?","id":"590a31a6-e51d-417c-87a0-5612f612b710","answers":[{"answer_start":23,"text":"Input/Output"}]},{"question":"Send me the description of read write signal","id":"654c4794-9f29-4eaf-b773-98c2ce556e4f","answers":[{"answer_start":52,"text":"Read Write Data Strobe. During the Command/Address portion of all bus transactions RWDS is a slave  output and indicates whether additional initial latency is required. Slave output during read data transfer, data  is edge aligned with R WDS. Slave input during data transfer in write transactions to function as a data mask.  (High = additional latency, Low = no additional latency)."}]}]},{"context":"Table 2.2  Optional I/O Summary","qas":[]},{"context":"Symbol Type Description","qas":[]},{"context":"Symbol: 'RESET#', Type: 'Master Output,  Slave Input, Internal Pull-up', Description: 'Hardware RESET. When Low the slave device will self initialize and return to the Standby state. RWDS and  DQ[7:0] are placed into the High-Z state when RESET# is Low. The slave RESET# input includes a weak  pull-up, if RESET# is left unconnected it will be pulled up to the High state.'","qas":[{"question":"what is the type of reset# signal?","id":"1142e47f-1ddf-4c4c-bcaf-48b187b2aa6e","answers":[{"answer_start":25,"text":"Master Output,  Slave Input, Internal Pull-up"}]},{"question":"Send me the description of reset# signal","id":"23f62b69-7407-49f5-b92c-acae6d396662","answers":[{"answer_start":87,"text":"Hardware RESET. When Low the slave device will self initialize and return to the Standby state. RWDS and  DQ[7:0] are placed into the High-Z state when RESET# is Low. The slave RESET# input includes a weak  pull-up, if RESET# is left unconnected it will be pulled up to the High state."}]}]},{"context":"Symbol: 'RSTO#', Type: 'Master Input,  Slave Output,  Open Drain', Description: 'RESET Output. RSTO# is an open-drain output used to indicate when a Power-On-Reset (POR) is  occurring within the slave device and can be used as a system reset signal. Upon completion of the internal  POR, a user defined timeout period can extend the RSTO# Low time. Following the POR and user defined  extension time, RSTO# signal will cease driving Low so the master or external resistance can pull the signal  to High . There is no internal pull-up required on this signal, however, some slave devices may provide an  internal pull-up as a device specific feature.'","qas":[{"question":"What is the type of RSTO# signal?","id":"a57fbeff-cd07-49c7-9eaa-a6c171057cf1","answers":[{"answer_start":24,"text":"Master Input,  Slave Output,  Open Drain"}]},{"question":"Send me the description of reset output signal","id":"0cfc2e73-84ca-4932-9d7d-8a8f0227a1a3","answers":[{"answer_start":81,"text":"RESET Output. RSTO# is an open-drain output used to indicate when a Power-On-Reset (POR) is  occurring within the slave device and can be used as a system reset signal. Upon completion of the internal  POR, a user defined timeout period can extend the RSTO# Low time. Following the POR and user defined  extension time, RSTO# signal will cease driving Low so the master or external resistance can pull the signal  to High . There is no internal pull-up required on this signal, however, some slave devices may provide an  internal pull-up as a device specific feature."}]}]},{"context":"Symbol: 'INT#', Type: 'Master Input,  Slave Output,  Open Drain', Description: 'Interrupt Output. When INT# is Low the slave device is indicating that an internal event has occurred. This  signal is intended to be used as a system interrupt from the slave device to indicate that an on-chip event  has occurred. INT# is an open-drain output. There is no internal pull-up required on this signal, however,  some slave devices may provide an internal pull-up as a device specific feature.'","qas":[{"question":"What is the type of interrupt output signal?","id":"8bf2735f-34d1-4a9c-89e1-3bfb82ab909e","answers":[{"answer_start":23,"text":"Master Input,  Slave Output,  Open Drain"}]},{"question":"Send me the description of INT#","id":"d10b49e2-610b-462e-b026-2563818a4a1f","answers":[{"answer_start":80,"text":"Interrupt Output. When INT# is Low the slave device is indicating that an internal event has occurred. This  signal is intended to be used as a system interrupt from the slave device to indicate that an on-chip event  has occurred. INT# is an open-drain output. There is no internal pull-up required on this signal, however,  some slave devices may provide an internal pull-up as a device specific feature."}]},{"question":"What happens when INT# signal is low?","id":"cbe31918-c08a-44ff-bcb6-9c8fd1d6bb30","answers":[{"answer_start":97,"text":" When INT# is Low the slave device is indicating that an internal event has occurred."}]},{"question":"Why do we use interrupt output signal?","id":"96adaf4c-c4d7-4113-9e55-488a51ddf836","answers":[{"answer_start":183,"text":"This  signal is intended to be used as a system interrupt from the slave device to indicate that an on-chip event  has occurred."}]}]},{"context":"Document Number: 001-99253 Rev. *B Page 9 of 47","qas":[]},{"context":"3. HyperBus Protocol\nAll bus transactions can be classified as either read or write. A bus transaction is started with CS# going Low with clock in idle state \n(CK=Low and CK#=High). The first three clock cycles transfer three words of Command/Address (CA0, CA1, CA2) information to \ndefine the transaction characteristics. The Command/Address words are presented with DDR timing, using the first six clock edges. \nThe following characteristics are defined by the Command/Address information:","qas":[{"question":"What are bus transactions classified as?","id":"706c6002-3aca-4444-b543-ee0e2f96c283","answers":[{"answer_start":21,"text":"All bus transactions can be classified as either read or write."}]},{"question":"How does bus transaction start?","id":"a3480e46-f72e-440c-886f-2f0ca5e668e5","answers":[{"answer_start":85,"text":"A bus transaction is started with CS# going Low with clock in idle state \n(CK=Low and CK#=High)."}]},{"question":"What is the use of the first three clock cycles?","id":"80c97347-1687-4965-964e-3550022e0c85","answers":[{"answer_start":182,"text":"The first three clock cycles transfer three words of Command/Address (CA0, CA1, CA2) information to \ndefine the transaction characteristics. "}]}]},{"context":"\uf06e Read or Write transaction","qas":[]},{"context":"\uf06e Address Space: memory array space or register space","qas":[]},{"context":"\u2013 Register space is used to access Device Identification (ID) registers and Configuration Registers (CR) that identify the device \ncharacteristics and determine the slave specific behavior of read and write transfers on the HyperBus interface.","qas":[]},{"context":"\uf06e Whether a transaction will use a linear or wrapped burst sequence.","qas":[]},{"context":"\uf06e The target row (and half-page) address (upper order address)","qas":[]},{"context":"\uf06e The target column (word within half-page) address (lower order address)","qas":[]},{"context":"During the Command/Address (CA) portion of all transactions, RWDS is used by the memory to indicate whether additional initial \naccess latency will be inserted.","qas":[]},{"context":"Following the Command/Address information, a number of clock cycles without data transfer may be used to satisfy any initial \nlatency requirements before data is transferred. The number of clock cycles inserted is defined by a slave configuration register \n(latency count) value. If RWDS was High during the CA period an additional latency count is inserted.","qas":[]},{"context":"Some slave devices may require write transactions with zero latency between the CA cycles and following write data transfers. \nWrites with zero initial latency, do not have a turn around period for RWDS. The slave device will always drive RWDS during the \nCommand-Address period to indicate whether extended latency is required for a transaction that has initial latency. However, the \nRWDS is driven before the slave device has received the first byte of CA i.e. before the slave knows whether the transaction is a \nread or write, to memory space or register space. In the case of a write with zero latency, the RWDS state during the CA period does \nnot affect the initial latency of zero. Since master write data immediately follows the Command-Address period in this case, the slave \nmay continue to drive RWDS Low or may take RWDS to High-Z during write data transfer. The master must not drive RWDS during \nWrites with zero latency. Writes with zero latency do not use RWDS as a data mask function. All bytes of write data are written (full \nword writes). Writes without initial latency are generally used for register space writes but the requirement for writes with zero latency \nis slave device dependent. Writes with zero latency may be required for memory space or register space or neither, depending on \nthe slave device capability.","qas":[{"question":"Which device drives RWDS during command address period?","id":"74165d9d-8376-4dc1-878d-40a29566c081","answers":[{"answer_start":204,"text":"The slave device will always drive RWDS during the \nCommand-Address period to indicate whether extended latency is required for a transaction that has initial latency."}]},{"question":"When can a device drive RWDS?","id":"74daa3ed-fe03-4a9f-ac6e-5882fe6f74b0","answers":[{"answer_start":386,"text":"RWDS is driven before the slave device has received the first byte of CA i.e. before the slave knows whether the transaction is a \nread or write, to memory space or register space."}]}]},{"context":"When data transfer begins, read data is edge aligned with RWDS transitions or write data is center aligned with single-ended clock \nedges or differential clock CK/CK# crossings. During read data transfer, RWDS serves as a source synchronous read data timing \nstrobe. During write data transfer, clock edges or crossings provide the data timing reference and RWDS is used as a data mask. \nWhen RWDS is low during a write data transfer, the data byte is written into memory; if RWDS is high during the transfer the byte is \nnot written.","qas":[{"question":"What happens when data transfer begin?","id":"acbe941d-2047-4dec-9ee5-9eae21b7cc9a","answers":[{"answer_start":27,"text":"read data is edge aligned with RWDS transitions or write data is center aligned with single-ended clock \nedges or differential clock CK/CK# crossings."}]}]},{"context":"Data is always transferred as 16 bit values with the first eight bits (byte A) transferred on a High going CK (write data) or following a \nRWDS rising edge (read data) and the second eight bits (byte B) is transferred on the Low going CK edge or following the falling \nRWDS edge.","qas":[{"question":"How many bits needed to transfer the data?","id":"570077e7-e032-49a1-ac86-d497d7a22628","answers":[{"answer_start":0,"text":"Data is always transferred as 16 bit values with the first eight bits (byte A) transferred on a High going CK (write data) or following a \nRWDS rising edge (read data) and the second eight bits (byte B) is transferred on the Low going CK edge or following the falling \nRWDS edge."}]}]},{"context":"Once the target data has been transferred, the host completes the transaction by driving CS# High with clock idle. Data transfers \ncan be ended at any time by bringing CS# High when clock is idle.","qas":[{"question":"How to end data transfer?","id":"0bf0169c-c40f-49c2-9b37-a457a01e9ca0","answers":[{"answer_start":115,"text":"Data transfers \ncan be ended at any time by bringing CS# High when clock is idle."}]}]},{"context":"The clock is not required to be free-running. The clock may be idle while CS# is High or may stop in the idle state while CS# is Low \n(this is called Active Clock Stop). Support for Active Clock Stop is slave device dependent. It is an optional HyperBus device feature.","qas":[{"question":"Is the clock high while CS# is high?","id":"7746223e-8a36-4835-be76-04263950d258","answers":[{"answer_start":46,"text":"The clock may be idle while CS# is High or may stop in the idle state while CS# is Low \n(this is called Active Clock Stop)."}]}]},{"context":"Document Number: 001-99253 Rev. *B Page 10 of 47","qas":[]},{"context":"3.1 Command/Address Bit Assignments","qas":[]},{"context":"Figure 3.1  Command-Address Sequence","qas":[]},{"context":"Notes:\n1. Figure shows the initial three clock cycles of all transactions on the HyperBus.\n2. CK# of differential clock is shown as dashed line waveform.\n3. Command-Address information is \u201ccenter aligned\u201d with the clock during both Read and Write transactions.","qas":[]},{"context":"Table 3.1  Command-Address Bit Assignment to DQ Signals\nSignal CA0[47:40] CA0[39:32] CA1[31:24] CA1[23:16] CA2[15:8] CA2[7:0]","qas":[]},{"context":"Document Number: 001-99253 Rev. *B Page 11 of","qas":[]},{"context":"CA Bit#: '47', Bit Name: 'R/W#', Bit Function: 'Identifies the transaction as a read or write.  R/W#=1 indicates a Read transaction R/W#=0 indicates a Write transaction'","qas":[{"question":"What is the function of R/W# bit?","id":"fcc2ebc7-d771-44bd-a6e0-d85a47091d75","answers":[{"answer_start":47,"text":"'Identifies the transaction as a read or write.  R/W#=1 indicates a Read transaction R/W#=0 indicates a Write transaction"}]},{"question":"What does R/W#=1 indicate?","id":"5bcb7a5f-d88b-475f-ab20-065981c253af","answers":[{"answer_start":96,"text":"R/W#=1 indicates a Read transaction"}]},{"question":"What happens when R/W#=0?","id":"db2fe84c-8cda-4312-bcf2-847e002f56cc","answers":[{"answer_start":132,"text":"R/W#=0 indicates a Write transaction"}]}]},{"context":"CA Bit#: '46', Bit Name: 'Address Space  (AS)', Bit Function: 'Indicates whether the read or write transaction accesses the memory or register space.  AS=0 indicates memory space AS=1 indicates the register space The register space is used to access device ID and Configuration registers.'","qas":[{"question":"What is the use of Address space bit?","id":"d7aeace7-a478-4870-b6eb-d33704c5c708","answers":[{"answer_start":63,"text":"Indicates whether the read or write transaction accesses the memory or register space.  AS=0 indicates memory space AS=1 indicates the register space The register space is used to access device ID and Configuration registers."}]},{"question":"What happens when AS is low?","id":"81978504-719a-46d1-a06f-3ce218575aea","answers":[{"answer_start":151,"text":"AS=0 indicates memory space"}]},{"question":"What happens when AS=1?","id":"0fb94e37-916a-49a7-be20-5903726326b6","answers":[{"answer_start":179,"text":"AS=1 indicates the register space"}]}]},{"context":"CA Bit#: '45', Bit Name: 'Burst Type', Bit Function: 'Indicates whether the burst will be linear or wrapped.  Burst Type=0 indicates wrapped burst Burst Type=1 indicates linear burst'","qas":[{"question":"What is the use of burst type bit?","id":"902d7654-d17d-4a1f-8bfe-47dd378f2357","answers":[{"answer_start":54,"text":"Indicates whether the burst will be linear or wrapped.  Burst Type=0 indicates wrapped burst Burst Type=1 indicates linear burst"}]}]},{"context":"CA Bit#: '44-16', Bit Name: 'Row & Upper  Column Address', Bit Function: 'Row & Upper Column component of the target address: System word address bits A31-A3 Any upper Row address bits not used by a particular device density should be set to 0 by the host  controller master interface. The size of Rows and therefore the address bit boundary between Row  and Column address is slave device dependent.'","qas":[{"question":"What is the CA bit# of row and upper column address?","id":"dc6adc2d-4d63-4b30-9617-b5aafa9a0d74","answers":[{"answer_start":10,"text":"44-16"}]}]},{"context":"CA Bit#: '15-3', Bit Name: 'Reserved', Bit Function: 'Reserved for future column address expansion.  Reserved bits are don\u2019t care in current HyperBus devices but should be set to 0 by the host controller  master interface for future compatibility.'","qas":[{"question":"What is the CA bit# of reserved bit?","id":"55d42943-05ba-45cb-9022-474773b59157","answers":[{"answer_start":10,"text":"15-3"}]},{"question":"What is the use of reserved bit?","id":"4638f954-a2e4-4f2a-9dc7-50c64c0f4dc6","answers":[{"answer_start":54,"text":"Reserved for future column address expansion.  Reserved bits are don\u2019t care in current HyperBus devices but should be set to 0 by the host controller  master interface for future compatibility."}]}]},{"context":"CA Bit#: '2-0', Bit Name: 'Lower Column  Address', Bit Function: 'Lower Column component of the target address: System word address bits A2-0 selecting the  starting word within a half-page.'","qas":[]},{"context":"Document Number: 001-99253 Rev. *B Page 12 of 47","qas":[]},{"context":"Table 3.3  Data Bit Placement During Read or Write Transaction  (Sheet 1 of 2)","qas":[]},{"context":"Address \nSpace","qas":[]},{"context":"Byte \nOrder","qas":[]},{"context":"Byte \nPosition","qas":[]},{"context":"Word \nData \nBit DQ Bit Order","qas":[]},{"context":"Address  Space: 'Memory', Byte  Order: 'Big- endian', Byte  Position: 'A', Word  Data  Bit: '15', DQ: '7', Bit Order: 'When data is being accessed in memory space:  The first byte of each word read or written is the \u201cA\u201d byte and the second is the \u201cB\u201d byte.  The bits of the word within the A and B bytes depend on how the data was written. If the  word lower address bits 7-0 are written in the A byte position and bits 15-8 are written into  the B byte position, or vice versa, they will be read back in the same order.  So, memory space can be stored and read in either little-endian or big-endian order.'","qas":[{"question":"What happens when data is accessed in memory space?","id":"543a04ba-74c1-4212-9101-53ade6f669bd","answers":[{"answer_start":163,"text":"  The first byte of each word read or written is the \u201cA\u201d byte and the second is the \u201cB\u201d byte.  The bits of the word within the A and B bytes depend on how the data was written. If the  word lower address bits 7-0 are written in the A byte position and bits 15-8 are written into  the B byte position, or vice versa, they will be read back in the same order.  So, memory space can be stored and read in either little-endian or big-endian order."}]}]},{"context":"Address  Space: 'Memory', Byte  Order: 'Big- endian', Byte  Position: 'A', Word  Data  Bit: '14', DQ: '6', Bit Order: 'When data is being accessed in memory space:  The first byte of each word read or written is the \u201cA\u201d byte and the second is the \u201cB\u201d byte.  The bits of the word within the A and B bytes depend on how the data was written. If the  word lower address bits 7-0 are written in the A byte position and bits 15-8 are written into  the B byte position, or vice versa, they will be read back in the same order.  So, memory space can be stored and read in either little-endian or big-endian order.'","qas":[]},{"context":"Address  Space: 'Memory', Byte  Order: 'Big- endian', Byte  Position: 'A', Word  Data  Bit: '13', DQ: '5', Bit Order: 'When data is being accessed in memory space:  The first byte of each word read or written is the \u201cA\u201d byte and the second is the \u201cB\u201d byte.  The bits of the word within the A and B bytes depend on how the data was written. If the  word lower address bits 7-0 are written in the A byte position and bits 15-8 are written into  the B byte position, or vice versa, they will be read back in the same order.  So, memory space can be stored and read in either little-endian or big-endian order.'","qas":[]},{"context":"Address  Space: 'Memory', Byte  Order: 'Big- endian', Byte  Position: 'A', Word  Data  Bit: '12', DQ: '4', Bit Order: 'When data is being accessed in memory space:  The first byte of each word read or written is the \u201cA\u201d byte and the second is the \u201cB\u201d byte.  The bits of the word within the A and B bytes depend on how the data was written. If the  word lower address bits 7-0 are written in the A byte position and bits 15-8 are written into  the B byte position, or vice versa, they will be read back in the same order.  So, memory space can be stored and read in either little-endian or big-endian order.'","qas":[]},{"context":"Address  Space: 'Memory', Byte  Order: 'Big- endian', Byte  Position: 'A', Word  Data  Bit: '11', DQ: '3', Bit Order: 'When data is being accessed in memory space:  The first byte of each word read or written is the \u201cA\u201d byte and the second is the \u201cB\u201d byte.  The bits of the word within the A and B bytes depend on how the data was written. If the  word lower address bits 7-0 are written in the A byte position and bits 15-8 are written into  the B byte position, or vice versa, they will be read back in the same order.  So, memory space can be stored and read in either little-endian or big-endian order.'","qas":[]},{"context":"Address  Space: 'Memory', Byte  Order: 'Big- endian', Byte  Position: 'A', Word  Data  Bit: '10', DQ: '2', Bit Order: 'When data is being accessed in memory space:  The first byte of each word read or written is the \u201cA\u201d byte and the second is the \u201cB\u201d byte.  The bits of the word within the A and B bytes depend on how the data was written. If the  word lower address bits 7-0 are written in the A byte position and bits 15-8 are written into  the B byte position, or vice versa, they will be read back in the same order.  So, memory space can be stored and read in either little-endian or big-endian order.'","qas":[]},{"context":"Address  Space: 'Memory', Byte  Order: 'Big- endian', Byte  Position: 'A', Word  Data  Bit: '9', DQ: '1', Bit Order: 'When data is being accessed in memory space:  The first byte of each word read or written is the \u201cA\u201d byte and the second is the \u201cB\u201d byte.  The bits of the word within the A and B bytes depend on how the data was written. If the  word lower address bits 7-0 are written in the A byte position and bits 15-8 are written into  the B byte position, or vice versa, they will be read back in the same order.  So, memory space can be stored and read in either little-endian or big-endian order.'","qas":[]},{"context":"Address  Space: 'Memory', Byte  Order: 'Big- endian', Byte  Position: 'A', Word  Data  Bit: '8', DQ: '0', Bit Order: 'When data is being accessed in memory space:  The first byte of each word read or written is the \u201cA\u201d byte and the second is the \u201cB\u201d byte.  The bits of the word within the A and B bytes depend on how the data was written. If the  word lower address bits 7-0 are written in the A byte position and bits 15-8 are written into  the B byte position, or vice versa, they will be read back in the same order.  So, memory space can be stored and read in either little-endian or big-endian order.'","qas":[]},{"context":"Address  Space: 'Memory', Byte  Order: 'Big- endian', Byte  Position: 'B', Word  Data  Bit: '7', DQ: '7', Bit Order: 'When data is being accessed in memory space:  The first byte of each word read or written is the \u201cA\u201d byte and the second is the \u201cB\u201d byte.  The bits of the word within the A and B bytes depend on how the data was written. If the  word lower address bits 7-0 are written in the A byte position and bits 15-8 are written into  the B byte position, or vice versa, they will be read back in the same order.  So, memory space can be stored and read in either little-endian or big-endian order.'","qas":[{"question":"Can memory space be stored in big endian?","id":"5dd17e27-22ed-4882-bf78-7ece6fa06f10","answers":[{"answer_start":525,"text":"memory space can be stored and read in either little-endian or big-endian order"}]}]},{"context":"Address  Space: 'Memory', Byte  Order: 'Big- endian', Byte  Position: 'B', Word  Data  Bit: '6', DQ: '6', Bit Order: 'When data is being accessed in memory space:  The first byte of each word read or written is the \u201cA\u201d byte and the second is the \u201cB\u201d byte.  The bits of the word within the A and B bytes depend on how the data was written. If the  word lower address bits 7-0 are written in the A byte position and bits 15-8 are written into  the B byte position, or vice versa, they will be read back in the same order.  So, memory space can be stored and read in either little-endian or big-endian order.'","qas":[]},{"context":"Address  Space: 'Memory', Byte  Order: 'Big- endian', Byte  Position: 'B', Word  Data  Bit: '5', DQ: '5', Bit Order: 'When data is being accessed in memory space:  The first byte of each word read or written is the \u201cA\u201d byte and the second is the \u201cB\u201d byte.  The bits of the word within the A and B bytes depend on how the data was written. If the  word lower address bits 7-0 are written in the A byte position and bits 15-8 are written into  the B byte position, or vice versa, they will be read back in the same order.  So, memory space can be stored and read in either little-endian or big-endian order.'","qas":[]},{"context":"Address  Space: 'Memory', Byte  Order: 'Big- endian', Byte  Position: 'B', Word  Data  Bit: '4', DQ: '4', Bit Order: 'When data is being accessed in memory space:  The first byte of each word read or written is the \u201cA\u201d byte and the second is the \u201cB\u201d byte.  The bits of the word within the A and B bytes depend on how the data was written. If the  word lower address bits 7-0 are written in the A byte position and bits 15-8 are written into  the B byte position, or vice versa, they will be read back in the same order.  So, memory space can be stored and read in either little-endian or big-endian order.'","qas":[]},{"context":"Address  Space: 'Memory', Byte  Order: 'Big- endian', Byte  Position: 'B', Word  Data  Bit: '3', DQ: '3', Bit Order: 'When data is being accessed in memory space:  The first byte of each word read or written is the \u201cA\u201d byte and the second is the \u201cB\u201d byte.  The bits of the word within the A and B bytes depend on how the data was written. If the  word lower address bits 7-0 are written in the A byte position and bits 15-8 are written into  the B byte position, or vice versa, they will be read back in the same order.  So, memory space can be stored and read in either little-endian or big-endian order.'","qas":[]},{"context":"Address  Space: 'Memory', Byte  Order: 'Big- endian', Byte  Position: 'B', Word  Data  Bit: '2', DQ: '2', Bit Order: 'When data is being accessed in memory space:  The first byte of each word read or written is the \u201cA\u201d byte and the second is the \u201cB\u201d byte.  The bits of the word within the A and B bytes depend on how the data was written. If the  word lower address bits 7-0 are written in the A byte position and bits 15-8 are written into  the B byte position, or vice versa, they will be read back in the same order.  So, memory space can be stored and read in either little-endian or big-endian order.'","qas":[]},{"context":"Address  Space: 'Memory', Byte  Order: 'Big- endian', Byte  Position: 'B', Word  Data  Bit: '1', DQ: '1', Bit Order: 'When data is being accessed in memory space:  The first byte of each word read or written is the \u201cA\u201d byte and the second is the \u201cB\u201d byte.  The bits of the word within the A and B bytes depend on how the data was written. If the  word lower address bits 7-0 are written in the A byte position and bits 15-8 are written into  the B byte position, or vice versa, they will be read back in the same order.  So, memory space can be stored and read in either little-endian or big-endian order.'","qas":[]},{"context":"Address  Space: 'Memory', Byte  Order: 'Big- endian', Byte  Position: 'B', Word  Data  Bit: '0', DQ: '0', Bit Order: 'When data is being accessed in memory space:  The first byte of each word read or written is the \u201cA\u201d byte and the second is the \u201cB\u201d byte.  The bits of the word within the A and B bytes depend on how the data was written. If the  word lower address bits 7-0 are written in the A byte position and bits 15-8 are written into  the B byte position, or vice versa, they will be read back in the same order.  So, memory space can be stored and read in either little-endian or big-endian order.'","qas":[]},{"context":"Address  Space: 'Memory', Byte  Order: 'Little- endian', Byte  Position: 'A', Word  Data  Bit: '7', DQ: '7', Bit Order: 'When data is being accessed in memory space:  The first byte of each word read or written is the \u201cA\u201d byte and the second is the \u201cB\u201d byte.  The bits of the word within the A and B bytes depend on how the data was written. If the  word lower address bits 7-0 are written in the A byte position and bits 15-8 are written into  the B byte position, or vice versa, they will be read back in the same order.  So, memory space can be stored and read in either little-endian or big-endian order.'","qas":[]},{"context":"Address  Space: 'Memory', Byte  Order: 'Little- endian', Byte  Position: 'A', Word  Data  Bit: '6', DQ: '6', Bit Order: 'When data is being accessed in memory space:  The first byte of each word read or written is the \u201cA\u201d byte and the second is the \u201cB\u201d byte.  The bits of the word within the A and B bytes depend on how the data was written. If the  word lower address bits 7-0 are written in the A byte position and bits 15-8 are written into  the B byte position, or vice versa, they will be read back in the same order.  So, memory space can be stored and read in either little-endian or big-endian order.'","qas":[]},{"context":"Address  Space: 'Memory', Byte  Order: 'Little- endian', Byte  Position: 'A', Word  Data  Bit: '5', DQ: '5', Bit Order: 'When data is being accessed in memory space:  The first byte of each word read or written is the \u201cA\u201d byte and the second is the \u201cB\u201d byte.  The bits of the word within the A and B bytes depend on how the data was written. If the  word lower address bits 7-0 are written in the A byte position and bits 15-8 are written into  the B byte position, or vice versa, they will be read back in the same order.  So, memory space can be stored and read in either little-endian or big-endian order.'","qas":[]},{"context":"Address  Space: 'Memory', Byte  Order: 'Little- endian', Byte  Position: 'A', Word  Data  Bit: '4', DQ: '4', Bit Order: 'When data is being accessed in memory space:  The first byte of each word read or written is the \u201cA\u201d byte and the second is the \u201cB\u201d byte.  The bits of the word within the A and B bytes depend on how the data was written. If the  word lower address bits 7-0 are written in the A byte position and bits 15-8 are written into  the B byte position, or vice versa, they will be read back in the same order.  So, memory space can be stored and read in either little-endian or big-endian order.'","qas":[]},{"context":"Address  Space: 'Memory', Byte  Order: 'Little- endian', Byte  Position: 'A', Word  Data  Bit: '3', DQ: '3', Bit Order: 'When data is being accessed in memory space:  The first byte of each word read or written is the \u201cA\u201d byte and the second is the \u201cB\u201d byte.  The bits of the word within the A and B bytes depend on how the data was written. If the  word lower address bits 7-0 are written in the A byte position and bits 15-8 are written into  the B byte position, or vice versa, they will be read back in the same order.  So, memory space can be stored and read in either little-endian or big-endian order.'","qas":[]},{"context":"Address  Space: 'Memory', Byte  Order: 'Little- endian', Byte  Position: 'A', Word  Data  Bit: '2', DQ: '2', Bit Order: 'When data is being accessed in memory space:  The first byte of each word read or written is the \u201cA\u201d byte and the second is the \u201cB\u201d byte.  The bits of the word within the A and B bytes depend on how the data was written. If the  word lower address bits 7-0 are written in the A byte position and bits 15-8 are written into  the B byte position, or vice versa, they will be read back in the same order.  So, memory space can be stored and read in either little-endian or big-endian order.'","qas":[]},{"context":"Address  Space: 'Memory', Byte  Order: 'Little- endian', Byte  Position: 'A', Word  Data  Bit: '1', DQ: '1', Bit Order: 'When data is being accessed in memory space:  The first byte of each word read or written is the \u201cA\u201d byte and the second is the \u201cB\u201d byte.  The bits of the word within the A and B bytes depend on how the data was written. If the  word lower address bits 7-0 are written in the A byte position and bits 15-8 are written into  the B byte position, or vice versa, they will be read back in the same order.  So, memory space can be stored and read in either little-endian or big-endian order.'","qas":[]},{"context":"Address  Space: 'Memory', Byte  Order: 'Little- endian', Byte  Position: 'A', Word  Data  Bit: '0', DQ: '0', Bit Order: 'When data is being accessed in memory space:  The first byte of each word read or written is the \u201cA\u201d byte and the second is the \u201cB\u201d byte.  The bits of the word within the A and B bytes depend on how the data was written. If the  word lower address bits 7-0 are written in the A byte position and bits 15-8 are written into  the B byte position, or vice versa, they will be read back in the same order.  So, memory space can be stored and read in either little-endian or big-endian order.'","qas":[]},{"context":"Address  Space: 'Memory', Byte  Order: 'Little- endian', Byte  Position: 'B', Word  Data  Bit: '15', DQ: '7', Bit Order: 'When data is being accessed in memory space:  The first byte of each word read or written is the \u201cA\u201d byte and the second is the \u201cB\u201d byte.  The bits of the word within the A and B bytes depend on how the data was written. If the  word lower address bits 7-0 are written in the A byte position and bits 15-8 are written into  the B byte position, or vice versa, they will be read back in the same order.  So, memory space can be stored and read in either little-endian or big-endian order.'","qas":[]},{"context":"Address  Space: 'Memory', Byte  Order: 'Little- endian', Byte  Position: 'B', Word  Data  Bit: '14', DQ: '6', Bit Order: 'When data is being accessed in memory space:  The first byte of each word read or written is the \u201cA\u201d byte and the second is the \u201cB\u201d byte.  The bits of the word within the A and B bytes depend on how the data was written. If the  word lower address bits 7-0 are written in the A byte position and bits 15-8 are written into  the B byte position, or vice versa, they will be read back in the same order.  So, memory space can be stored and read in either little-endian or big-endian order.'","qas":[]},{"context":"Address  Space: 'Memory', Byte  Order: 'Little- endian', Byte  Position: 'B', Word  Data  Bit: '13', DQ: '5', Bit Order: 'When data is being accessed in memory space:  The first byte of each word read or written is the \u201cA\u201d byte and the second is the \u201cB\u201d byte.  The bits of the word within the A and B bytes depend on how the data was written. If the  word lower address bits 7-0 are written in the A byte position and bits 15-8 are written into  the B byte position, or vice versa, they will be read back in the same order.  So, memory space can be stored and read in either little-endian or big-endian order.'","qas":[]},{"context":"Address  Space: 'Memory', Byte  Order: 'Little- endian', Byte  Position: 'B', Word  Data  Bit: '12', DQ: '4', Bit Order: 'When data is being accessed in memory space:  The first byte of each word read or written is the \u201cA\u201d byte and the second is the \u201cB\u201d byte.  The bits of the word within the A and B bytes depend on how the data was written. If the  word lower address bits 7-0 are written in the A byte position and bits 15-8 are written into  the B byte position, or vice versa, they will be read back in the same order.  So, memory space can be stored and read in either little-endian or big-endian order.'","qas":[]},{"context":"Address  Space: 'Memory', Byte  Order: 'Little- endian', Byte  Position: 'B', Word  Data  Bit: '11', DQ: '3', Bit Order: 'When data is being accessed in memory space:  The first byte of each word read or written is the \u201cA\u201d byte and the second is the \u201cB\u201d byte.  The bits of the word within the A and B bytes depend on how the data was written. If the  word lower address bits 7-0 are written in the A byte position and bits 15-8 are written into  the B byte position, or vice versa, they will be read back in the same order.  So, memory space can be stored and read in either little-endian or big-endian order.'","qas":[]}]}]}