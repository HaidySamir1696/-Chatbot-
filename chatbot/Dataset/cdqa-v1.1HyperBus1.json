{"data":[{"title":"HyperBus","paragraphs":[{"context":"\"Spansion, Inc.\" and \"Cypress Semiconductor Corp.\" have merged together to deliver high-performance, high-quality solutions \nat the heart of today's most advanced embedded systems, from automotive, industrial and networking platforms to highly \ninteractive consumer and mobile devices. The new company  \"Cypress Semiconductor Corp.\" will continue to offer \"Spansion, \nInc.\" products to new and existing customers.","qas":[]},{"context":"Continuity of Specifications\nThere is no change to this document as a result of offering the device as a Cypress product. Any changes that have been made \nare the result of normal document improvements and are noted in the document history page, where supported. Future \nrevisions will occur when appropriate, and changes will be noted in a document history page.","qas":[]},{"context":"Continuity of Ordering Part Numbers\nCypress continues to support existing part numbers. To order these products, please use only the Ordering Part Numbers listed \nin this document.","qas":[]},{"context":"For More Information\nPlease contact your local sales office for additional information about Cypress products and solutions.","qas":[]},{"context":"\u2013 Bidirectional Data Strobe / Mask\n\u2013 Output at the start of all transactions to indicate refresh latency\n\u2013 Output during read transactions as Read Data Strobe\n\u2013 Input during write transactions as Write Data Mask","qas":[]},{"context":"High Performance\n\uf06e Up to 333MB/s\n\uf06e Double-Data Rate (DDR) - two data transfers per clock\n\uf06e 166-MHz clock rate (333 MB/s) at 1.8V VCC\n\uf06e 100-MHz clock rate (200 MB/s) at 3.0V VCC\n\uf06e Sequential burst transactions\n\uf06e Configurable Burst Characteristics","qas":[]},{"context":"\u2013 Wrapped burst length options: \n\u2013 128 Bytes (64 clocks)\n\u2013 64 Bytes (32 clocks)\n\u2013 32 Bytes (16 clocks)\n\u2013 16 Bytes (8 clocks)","qas":[]},{"context":"\u2013 Linear burst\n\u2013 Hybrid option \u2014 one wrapped burst followed by linear burst\n\u2013 Wrapped or linear burst type selected in each transaction\n\u2013 Configurable output drive strength","qas":[]},{"context":"\uf06e Package and Die Options\n\u2013 24-Ball FBGA footprint for single or multi-chip packages\n\u2013 KGD","qas":[]},{"context":"Document Number: 001-99253 Rev. *B Page 3 of 47","qas":[]},{"context":"Document Number: 001-99253 Rev. *B Page 4 of 47","qas":[]},{"context":"1. General Description\nHyperBus\u2122 products use the high performance HyperBus for connection between a host system master and one or more slave \ninterfaces. HyperBus is used to connect microprocessor, microcontroller, or ASIC devices with random access NOR Flash memory, \nRAM, or peripheral devices.","qas":[]},{"context":"HyperBus is an interface that draws upon the legacy features of both parallel and serial interface memories, while enhancing system \nperformance, ease of design, and system cost reduction.","qas":[{"question":"What is HyperBus?","id":"386e830d-fad7-474d-85ba-d3a6ba39b993","answers":[{"answer_start":0,"text":"HyperBus is an interface that draws upon the legacy features of both parallel and serial interface memories, while enhancing system \nperformance, ease of design, and system cost reduction."}]}]},{"context":"Parallel flash and PSRAM have long been the standard for simple interface, high performance, random access memory, used for \nembedded system code execution and data storage. However, parallel interface memory requires a high signal count with separate \ncontrol, address, and data connections that involve 45 or more signals. There have been parallel interface variations that reduce the \nsignal count by multiplexing some address and data signals yet, may still involve 20 or more signals. These high signal counts \nprovide high data throughput but, at the cost of many connectors on the host system processor or ASIC and, higher cost multi-layer \nPrinted Circuit Boards (PCB) that suffer from signal routing congestion.","qas":[]},{"context":"Many systems have moved to use of serial interface memories in order to reduce the number of signals needed for the connection to \nmemory and to free up host system connections for use by other features or to reduce package and multi-layer PCB cost. However, \nserial memories generally have lower data throughput or longer random access time, which may relegate serial memories to the role \nof mainly transferring code and data to DRAM memory for random access and high throughput. But, such shadowing architectures \ncause a duplication of memory space that means paying twice for memory, once for non-volatile serial memory and again for \nadditional DRAM to access the code and data during system operation.","qas":[{"question":"Why do systems use serial interface memories?","id":"383aca98-cfb7-4f57-bad2-9ac26ca0857f","answers":[{"answer_start":0,"text":"Many systems have moved to use of serial interface memories in order to reduce the number of signals needed for the connection to \nmemory and to free up host system connections for use by other features or to reduce package and multi-layer PCB cost."}]}]},{"context":"HyperBus has a low signal count, Double Data Rate (DDR) interface, that achieves high read and write throughput while reducing \nthe number of device I/O connections and signal routing congestion in a system.","qas":[{"question":"What does Double data rate achieve?","id":"ea95f40b-dee3-4d0d-bfa9-85b86f9ec427","answers":[{"answer_start":81,"text":"high read and write throughput while reducing \nthe number of device I/O connections and signal routing congestion in a system."}]}]},{"context":"HyperBus memories provide the fast random access of a parallel interface, for code eXecution-in-Place (XiP) directly from flash \nmemory, to reduce or eliminate duplication of memory space between non-volatile and volatile memories in the system. HyperBus \ndevices transfer all control (command), address, and data information sequentially, one byte per clock edge, at high frequency, to \nminimize signal count, yet deliver 3 to 6 times the throughput of legacy parallel or serial interfaces.","qas":[]},{"context":"All HyperBus inputs and outputs are LV-CMOS compatible. Operation at either 1.8V or 3.0V (nominal) I/O voltage supply (VCCQ) is \nsupported. Devices using 3.0V VCCQ use a single ended clock (CK) and those using 1.8V VCCQ use a differential clock pair (CK, \nCK#). Depending on the interface voltage selected, the signal count for HyperBus is 11 or 12 signals.","qas":[]},{"context":"The DDR protocol transfers two data bytes per clock cycle on the DQ input/output (I/O) signals. A read or write transaction on \nHyperBus consists of a sequential series of 16-bit, one clock cycle, data transfers - via two corresponding 8-bit wide, one-half-clock-\ncycle data transfers, one on each single ended clock edge or differential clock crossing. Read and write transactions always transfer \nfull 16-bit words of data. Read data words always contain two valid bytes. Write data words may have one or both bytes masked to \nprevent writing of individual bytes within a write burst.","qas":[]},{"context":"HyperBus has a single master (host system) interface and one or more slave interface devices.","qas":[]},{"context":"Each slave device on the bus is selected during a transaction by an individual, low active, Chip Select (CS#) from the master.","qas":[]},{"context":"Command, address, and data information is transferred over the eight HyperBus DQ[7:0] signals. The clock is used for information \ncapture by a HyperBus slave device when receiving command, address, or data on the DQ signals. Command or Address values \nare center aligned with clock transitions.","qas":[]},{"context":"Every transaction begins with the assertion of CS# and Command-Address (CA) signals, followed by the start of clock transitions to \ntransfer six CA bytes, followed by initial access latency and either read or write data transfers, until CS# is deasserted.","qas":[{"question":"How does a transaction begin?","id":"d18ca84e-96fc-4b55-ac06-d40513e41259","answers":[{"answer_start":0,"text":"Every transaction begins with the assertion of CS# and Command-Address (CA) signals, followed by the start of clock transitions to \ntransfer six CA bytes, followed by initial access latency and either read or write data transfers, until CS# is deasserted."}]}]},{"context":"Figure 1.1  Read Transaction, Single Initial Latency Count","qas":[]},{"context":"The Read/Write Data Strobe (RWDS) is a bidirectional signal that indicates:","qas":[]},{"context":"\u2013 when data will start to transfer from a slave to the master device in read transactions (initial read latency)","qas":[]},{"context":"\u2013 when data is being transferred from a slave to the master during read transactions (as a source synchronous read data \nstrobe)","qas":[]},{"context":"\u2013 when data may start to transfer from the master to a slave in write transactions (initial write latency)","qas":[]},{"context":"\u2013 data masking during write data transfers","qas":[]},{"context":"During the CA transfer portion of a read or write transaction, RWDS acts as an output from a slave to indicate whether additional \ninitial access latency is needed in the transaction.","qas":[]},{"context":"During read data transfers, RWDS is a read data strobe with data values edge aligned with the transitions of RWDS.","qas":[]},{"context":"Figure 1.2  Read Transaction, Additional Latency Count","qas":[]},{"context":"During write data transfers, RWDS indicates whether each data byte transfer is masked with RWDS High (invalid and prevented \nfrom changing the byte location in a memory) or not masked with RWDS Low (valid and written to a memory). Data masking may be","qas":[{"question":"What does RWDS indicate during write data transfers?","id":"bbe69878-399e-4ba2-9375-ce777f4d74ce","answers":[{"answer_start":44,"text":"whether each data byte transfer is masked with RWDS High (invalid and prevented \nfrom changing the byte location in a memory) or not masked with RWDS Low (valid and written to a memory)."}]}]},{"context":"RWDS and Data\nare edge aligned","qas":[]},{"context":"Document Number: 001-99253 Rev. *B Page 7 of 47","qas":[]}]}]}