[{"text": "Understanding the I2C Bus", "paragraph_id": 0}, {"text": "Microcontrolleror Processor", "paragraph_id": 1}, {"text": "Multiplexer /", "paragraph_id": 2}, {"text": "Switch", "paragraph_id": 3}, {"text": "I/O", "paragraph_id": 4}, {"text": "Expanders", "paragraph_id": 5}, {"text": "LED", "paragraph_id": 6}, {"text": "Blinkers", "paragraph_id": 7}, {"text": "Hub", "paragraph_id": 8}, {"text": "Repeater", "paragraph_id": 9}, {"text": "Buffer", "paragraph_id": 10}, {"text": "I/O", "paragraph_id": 11}, {"text": "Expanders", "paragraph_id": 12}, {"text": "Data", "paragraph_id": 13}, {"text": "ConverterEEPROM LCD Driver", "paragraph_id": 14}, {"text": "Temperature", "paragraph_id": 15}, {"text": "Sensor", "paragraph_id": 16}, {"text": "VCC", "paragraph_id": 17}, {"text": "VCC VCC", "paragraph_id": 18}, {"text": "VCC", "paragraph_id": 19}, {"text": "RP", "paragraph_id": 20}, {"text": "SCL", "paragraph_id": 21}, {"text": "SDA", "paragraph_id": 22}, {"text": "SCL0", "paragraph_id": 23}, {"text": "SDA0", "paragraph_id": 24}, {"text": "SCL1", "paragraph_id": 25}, {"text": "SDA1", "paragraph_id": 26}, {"text": "1SLVA704\u2013June 2015Submit Documentation Feedback", "paragraph_id": 27}, {"text": "Copyright \u00a9 2015, Texas Instruments Incorporated", "paragraph_id": 28}, {"text": "Understanding the I2C Bus", "paragraph_id": 29}, {"text": "Application ReportSLVA704\u2013June 2015", "paragraph_id": 30}, {"text": "Understanding the I2C Bus", "paragraph_id": 31}, {"text": "Jonathan Valdez, Jared Becker", "paragraph_id": 32}, {"text": "ABSTRACTThe I2C bus is a very popular and powerful bus used for communication between a master (or multiplemasters) and a single or multiple slave devices. Figure 1 illustrates how many different peripherals mayshare a bus which is connected to a processor through only 2 wires, which is one of the largest benefitsthat the I2C bus can give when compared to other interfaces.", "paragraph_id": 33}, {"text": "This application note is aimed at helping users understand how the I2C bus works.", "paragraph_id": 34}, {"text": "Figure 1 shows a typical I2C bus for an embedded system, where multiple slave devices are used. Themicrocontroller represents the I2C master, and controls the IO expanders, various sensors, EEPROM,ADCs/DACs, and much more. All of which are controlled with only 2 pins from the master.", "paragraph_id": 35}, {"text": "Figure 1. Example I2C Bus", "paragraph_id": 36}, {"text": "Trademarkshttp://www.go-dsp.com/forms/techdoc/doc_feedback.htm?litnum=SLVA704", "paragraph_id": 37}, {"text": "Logic", "paragraph_id": 38}, {"text": "Slave or Master", "paragraph_id": 39}, {"text": "RPU", "paragraph_id": 40}, {"text": "V", "paragraph_id": 41}, {"text": "Time", "paragraph_id": 42}, {"text": "VBUSVBUS", "paragraph_id": 43}, {"text": "SDA/SCL", "paragraph_id": 44}, {"text": "Logic", "paragraph_id": 45}, {"text": "Slave or Master", "paragraph_id": 46}, {"text": "RPU", "paragraph_id": 47}, {"text": "Electrical Characteristics www.ti.com", "paragraph_id": 48}, {"text": "2 SLVA704\u2013June 2015Submit Documentation Feedback", "paragraph_id": 49}, {"text": "Copyright \u00a9 2015, Texas Instruments Incorporated", "paragraph_id": 50}, {"text": "Understanding the I2C Bus", "paragraph_id": 51}, {"text": "1 Electrical CharacteristicsI2C uses an open-drain/open-collector with an input buffer on the same line, which allows a single data lineto be used for bidirectional data flow.", "paragraph_id": 52}, {"text": "1.1 Open-Drain for Bidirectional CommunicationOpen-drain refers to a type of output which can either pull the bus down to a voltage (ground, in mostcases), or \"release\" the bus and let it be pulled up by a pull-up resistor. In the event of the bus beingreleased by the master or a slave, the pull-up resistor (RPU) on the line is responsible for pulling the busvoltage up to the power rail. Since no device may force a high on a line, this means that the bus will neverrun into a communication issue where one device may try to transmit a high, and another transmits a low,causing a short (power rail to ground). I2C requires that if a master in a multi-master environment transmitsa high, but see's that the line is low (another device is pulling it down), to halt communications becauseanother device is using the bus. Push-pull interfaces do not allow for this type of freedom, which is abenefit of I2C.", "paragraph_id": 53}, {"text": "Figure 2. Basic Internal Structure of SDA/SCL Line", "paragraph_id": 54}, {"text": "Figure 2 shows a simplified view of the internal structure of the slave or master device on the SDA/SCLlines, consisting of a buffer to read input data, and a pull-down FET to transmit data. A device is only ableto pull the bus line low (provide short to ground) or release the bus line (high impedance to ground) andallow the pull-up resistor to raise the voltage. This is an important concept to realize when dealing with I2Cdevices, since no device may hold the bus high. This property is what allows bidirectional communicationto take place.", "paragraph_id": 55}, {"text": "1.1.1 Open-Drain Pulling LowAs described in the previous section, the Open-Drain setup may only pull a bus low, or \"release\" it and leta resistor pull it high. Figure 3 shows the flow of current to pull the bus low. The logic wanting to transmit alow will activate the pull-down FET, which will provide a short to ground, pulling the line low.", "paragraph_id": 56}, {"text": "Figure 3. Pulling the Bus Low With An Open-Drain Interfacehttp://www.ti.comhttp://www.go-dsp.com/forms/techdoc/doc_feedback.htm?litnum=SLVA704", "paragraph_id": 57}, {"text": "Logic", "paragraph_id": 58}, {"text": "Slave or Master", "paragraph_id": 59}, {"text": "RPU", "paragraph_id": 60}, {"text": "V", "paragraph_id": 61}, {"text": "Time", "paragraph_id": 62}, {"text": "VBUSVBUS", "paragraph_id": 63}, {"text": "SDA/SCLwww.ti.com I2C Interface", "paragraph_id": 64}, {"text": "3SLVA704\u2013June 2015Submit Documentation Feedback", "paragraph_id": 65}, {"text": "Copyright \u00a9 2015, Texas Instruments Incorporated", "paragraph_id": 66}, {"text": "Understanding the I2C Bus", "paragraph_id": 67}, {"text": "1.1.2 Open-Drain Releasing BusWhen the slave or master wishes to transmit a logic high, it may only release the bus by turning off thepull-down FET. This leaves the bus floating, and the pull-up resistor will pull the voltage up to the voltagerail, which will be interpreted as a high. Figure 4 shows the flow of current through the pull-up resistor,which pulls the bus high.", "paragraph_id": 68}, {"text": "Figure 4. Releasing the Bus With An Open-Drain Interface", "paragraph_id": 69}, {"text": "2 I2C Interface", "paragraph_id": 70}, {"text": "2.1 General I2C OperationThe I2C bus is a standard bidirectional interface that uses a controller, known as the master, tocommunicate with slave devices. A slave may not transmit data unless it has been addressed by themaster. Each device on the I2C bus has a specific device address to differentiate between other devicesthat are on the same I2C bus. Many slave devices will require configuration upon startup to set thebehavior of the device. This is typically done when the master accesses the slave's internal register maps,which have unique register addresses. A device can have one or multiple registers where data is stored,written, or read.", "paragraph_id": 71}, {"text": "The physical I2C interface consists of the serial clock (SCL) and serial data (SDA) lines. Both SDA andSCL lines must be connected to VCC through a pull-up resistor. The size of the pull-up resistor isdetermined by the amount of capacitance on the I2C lines (for further details, refer to I2C Pull-up ResistorCalculation (SLVA689). Data transfer may be initiated only when the bus is idle. A bus is considered idle ifboth SDA and SCL lines are high after a STOP condition.", "paragraph_id": 72}, {"text": "The general procedure for a master to access a slave device is the following:1. Suppose a master wants to send data to a slave:\u2022 Master-transmitter sends a START condition and addresses the slave-receiver\u2022 Master-transmitter sends data to slave-receiver\u2022 Master-transmitter terminates the transfer with a STOP condition", "paragraph_id": 73}, {"text": "2. If a master wants to receive/read data from a slave:\u2022 Master-receiver sends a START condition and addresses the slave-transmitter\u2022 Master-receiver sends the requested register to read to slave-transmitter\u2022 Master-receiver receives data from the slave-transmitter\u2022 Master-receiver terminates the transfer with a STOP conditionhttp://www.ti.comhttp://www.go-dsp.com/forms/techdoc/doc_feedback.htm?litnum=SLVA704http://www.ti.com/lit/pdf/SLVA689", "paragraph_id": 74}, {"text": "SCL", "paragraph_id": 75}, {"text": "SDA", "paragraph_id": 76}, {"text": "START", "paragraph_id": 77}, {"text": "Condition", "paragraph_id": 78}, {"text": "STOP", "paragraph_id": 79}, {"text": "Condition", "paragraph_id": 80}, {"text": "Data Transfer", "paragraph_id": 81}, {"text": "I2C Interface www.ti.com", "paragraph_id": 82}, {"text": "4 SLVA704\u2013June 2015Submit Documentation Feedback", "paragraph_id": 83}, {"text": "Copyright \u00a9 2015, Texas Instruments Incorporated", "paragraph_id": 84}, {"text": "Understanding the I2C Bus", "paragraph_id": 85}, {"text": "2.1.1 START and STOP ConditionsI2C communication with this device is initiated by the master sending a START condition and terminatedby the master sending a STOP condition. A high-to-low transition on the SDA line while the SCL is highdefines a START condition. A low-to-high transition on the SDA line while the SCL is high defines a STOPcondition.", "paragraph_id": 86}, {"text": "Figure 5. Example of START and STOP Condition", "paragraph_id": 87}, {"text": "2.1.2 Repeated START ConditionA repeated START condition is similar to a START condition and is used in place of a back-to-back STOPthen START condition. It looks identical to a START condition, but differs from a START conditionbecause it happens before a STOP condition (when the bus is not idle). This is useful for when the masterwishes to start a new communication, but does not wish to let the bus go idle with the STOP condition,which has the chance of the master losing control of the bus to another master (in multi-masterenvironments).", "paragraph_id": 88}, {"text": "2.2 Data Validity and Byte FormatOne data bit is transferred during each clock pulse of the SCL. One byte is comprised of eight bits on theSDA line. A byte may either be a device address, register address, or data written to or read from a slave.Data is transferred Most Significant Bit (MSB) first. Any number of data bytes can be transferred from themaster to slave between the START and STOP conditions. Data on the SDA line must remain stableduring the high phase of the clock period, as changes in the data line when the SCL is high areinterpreted as control commands (START or STOP).http://www.ti.comhttp://www.go-dsp.com/forms/techdoc/doc_feedback.htm?litnum=SLVA704", "paragraph_id": 89}, {"text": "SCL", "paragraph_id": 90}, {"text": "SDA", "paragraph_id": 91}, {"text": "MSB Bit Bit Bit Bit Bit Bit LSB", "paragraph_id": 92}, {"text": "Byte: 1010 1010 ( 0xAAh )", "paragraph_id": 93}, {"text": "1 0 1 0 1 0 1 0", "paragraph_id": 94}, {"text": "SDA line stable while SCL line is high", "paragraph_id": 95}, {"text": "ACK", "paragraph_id": 96}, {"text": "ACKwww.ti.com I2C Interface", "paragraph_id": 97}, {"text": "5SLVA704\u2013June 2015Submit Documentation Feedback", "paragraph_id": 98}, {"text": "Copyright \u00a9 2015, Texas Instruments Incorporated", "paragraph_id": 99}, {"text": "Understanding the I2C Bus", "paragraph_id": 100}, {"text": "Figure 6. Example of Single Byte Data Transfer", "paragraph_id": 101}, {"text": "2.3 Acknowledge (ACK) and Not Acknowledge (NACK)Each byte of data (including the address byte) is followed by one ACK bit from the receiver. The ACK bitallows the receiver to communicate to the transmitter that the byte was successfully received and anotherbyte may be sent.", "paragraph_id": 102}, {"text": "Before the receiver can send an ACK, the transmitter must release the SDA line. To send an ACK bit, thereceiver shall pull down the SDA line during the low phase of the ACK/NACK-related clock period (period9), so that the SDA line is stable low during the high phase of the ACK/NACK-related clock period. Setupand hold times must be taken into account.", "paragraph_id": 103}, {"text": "When the SDA line remains high during the ACK/NACK-related clock period, this is interpreted as aNACK. There are several conditions that lead to the generation of a NACK:1. The receiver is unable to receive or transmit because it is performing some real-time function and isnot ready to start communication with the master.2. During the transfer, the receiver gets data or commands that it does not understand.3. During the transfer, the receiver cannot receive any more data bytes.4. A master-receiver is done reading data and indicates this to the slave through a NACK.http://www.ti.comhttp://www.go-dsp.com/forms/techdoc/doc_feedback.htm?litnum=SLVA704", "paragraph_id": 104}, {"text": "SCL", "paragraph_id": 105}, {"text": "SDA", "paragraph_id": 106}, {"text": "1 2 3 4 5 6 7 8 9", "paragraph_id": 107}, {"text": "NACK", "paragraph_id": 108}, {"text": "Data Byte N", "paragraph_id": 109}, {"text": "STOP", "paragraph_id": 110}, {"text": "Condition", "paragraph_id": 111}, {"text": "MSB", "paragraph_id": 112}, {"text": "D7 D6 D5 D4 D3 D2 D1", "paragraph_id": 113}, {"text": "LSB", "paragraph_id": 114}, {"text": "D0", "paragraph_id": 115}, {"text": "I2C Data www.ti.com", "paragraph_id": 116}, {"text": "6 SLVA704\u2013June 2015Submit Documentation Feedback", "paragraph_id": 117}, {"text": "Copyright \u00a9 2015, Texas Instruments Incorporated", "paragraph_id": 118}, {"text": "Understanding the I2C Bus", "paragraph_id": 119}, {"text": "Figure 7. Example NACK Waveform", "paragraph_id": 120}, {"text": "3 I2C DataData must be sent and received to or from the slave devices, but the way that this is accomplished is byreading or writing to or from registers in the slave device.", "paragraph_id": 121}, {"text": "Registers are locations in the slave's memory which contain information, whether it be the configurationinformation, or some sampled data to send back to the master. The master must write information intothese registers in order to instruct the slave device to perform a task.", "paragraph_id": 122}, {"text": "While it is common to have registers in I2C slaves, please note that not all slave devices will haveregisters. Some devices are simple and contain only 1 register, which may be written directly to bysending the register data immediately after the slave address, instead of addressing a register. Anexample of a single-register device would be an 8-bit I2C switch, which is controlled via I2C commands.Since it has 1 bit to enable or disable a channel, there is only 1 register needed, and the master merelywrites the register data after the slave address, skipping the register number.http://www.ti.comhttp://www.go-dsp.com/forms/techdoc/doc_feedback.htm?litnum=SLVA704", "paragraph_id": 123}, {"text": "Read From One Register in a Device", "paragraph_id": 124}, {"text": "S A6 A5 A4 A3 A2 A1 A0 0", "paragraph_id": 125}, {"text": "Device (Slave) Address (7 bits)", "paragraph_id": 126}, {"text": "B7 B6 B5 B4 B3 B2 B1 B0 A", "paragraph_id": 127}, {"text": "Register Address N (8 bits)", "paragraph_id": 128}, {"text": "A", "paragraph_id": 129}, {"text": "START ACK ACK", "paragraph_id": 130}, {"text": "Sr A6 A5 A4 A3 A2 A1 A0", "paragraph_id": 131}, {"text": "Device (Slave) Address (7 bits)", "paragraph_id": 132}, {"text": "Repeated START", "paragraph_id": 133}, {"text": "1 A D7 D6 D5 D4 D3 D2 D1 D0 NA", "paragraph_id": 134}, {"text": "Data Byte From Register N (8 bits)", "paragraph_id": 135}, {"text": "P", "paragraph_id": 136}, {"text": "NACK STOPACK", "paragraph_id": 137}, {"text": "Master Controls SDA Line", "paragraph_id": 138}, {"text": "Slave Controls SDA Line", "paragraph_id": 139}, {"text": "R/W = 0 R/W = 1", "paragraph_id": 140}, {"text": "S A6 A5 A4 A3 A2 A1 A0 0", "paragraph_id": 141}, {"text": "Device (Slave) Address (7 bits)", "paragraph_id": 142}, {"text": "B7 B6 B5 B4 B3 B2 B1 B0 A", "paragraph_id": 143}, {"text": "Register Address N (8 bits)", "paragraph_id": 144}, {"text": "D7 D6 D5 D4 D3 D2 D1 D0 A", "paragraph_id": 145}, {"text": "Data Byte to Register N (8 bits)", "paragraph_id": 146}, {"text": "A P", "paragraph_id": 147}, {"text": "START R/W = 0 ACK ACK ACK STOP", "paragraph_id": 148}, {"text": "Write to One Register in a Device", "paragraph_id": 149}, {"text": "Master Controls SDA Line", "paragraph_id": 150}, {"text": "Slave Controls SDA Linewww.ti.com I2C Data", "paragraph_id": 151}, {"text": "7SLVA704\u2013June 2015Submit Documentation Feedback", "paragraph_id": 152}, {"text": "Copyright \u00a9 2015, Texas Instruments Incorporated", "paragraph_id": 153}, {"text": "Understanding the I2C Bus", "paragraph_id": 154}, {"text": "3.1 Writing to a Slave On The I2C BusTo write on the I2C bus, the master will send a start condition on the bus with the slave's address, as wellas the last bit (the R/W bit) set to 0, which signifies a write. After the slave sends the acknowledge bit, themaster will then send the register address of the register it wishes to write to. The slave will acknowledgeagain, letting the master know it is ready. After this, the master will start sending the register data to theslave, until the master has sent all the data it needs to (sometimes this is only a single byte), and themaster will terminate the transmission with a STOP condition.", "paragraph_id": 155}, {"text": "Figure 8 shows an example of writing a single byte to a slave register.", "paragraph_id": 156}, {"text": "Figure 8. Example I2C Write to Slave Device's Register", "paragraph_id": 157}, {"text": "3.2 Reading From a Slave On The I2C BusReading from a slave is very similar to writing, but with some extra steps. In order to read from a slave,the master must first instruct the slave which register it wishes to read from. This is done by the masterstarting off the transmission in a similar fashion as the write, by sending the address with the R/W bitequal to 0 (signifying a write), followed by the register address it wishes to read from. Once the slaveacknowledges this register address, the master will send a START condition again, followed by the slaveaddress with the R/W bit set to 1 (signifying a read). This time, the slave will acknowledge the readrequest, and the master releases the SDA bus, but will continue supplying the clock to the slave. Duringthis part of the transaction, the master will become the master-receiver, and the slave will become theslave-transmitter.", "paragraph_id": 158}, {"text": "The master will continue sending out the clock pulses, but will release the SDA line, so that the slave cantransmit data. At the end of every byte of data, the master will send an ACK to the slave, letting the slaveknow that it is ready for more data. Once the master has received the number of bytes it is expecting, itwill send a NACK, signaling to the slave to halt communications and release the bus. The master willfollow this up with a STOP condition.", "paragraph_id": 159}, {"text": "Figure 9 shows an example of reading a single byte from a slave register.", "paragraph_id": 160}, {"text": "Figure 9. Example I2C Read from Slave Device's Registerhttp://www.ti.comhttp://www.go-dsp.com/forms/techdoc/doc_feedback.htm?litnum=SLVA704", "paragraph_id": 161}, {"text": "IMPORTANT NOTICE FOR TI DESIGN INFORMATION AND RESOURCES", "paragraph_id": 162}, {"text": "Texas Instruments Incorporated (\u2018TI\u201d) technical, application or other design advice, services or information, including, but not limited to,reference designs and materials relating to evaluation modules, (collectively, \u201cTI Resources\u201d) are intended to assist designers who aredeveloping applications that incorporate TI products; by downloading, accessing or using any particular TI Resource in any way, you(individually or, if you are acting on behalf of a company, your company) agree to use it solely for this purpose and subject to the terms ofthis Notice.TI\u2019s provision of TI Resources does not expand or otherwise alter TI\u2019s applicable published warranties or warranty disclaimers for TIproducts, and no additional obligations or liabilities arise from TI providing such TI Resources. TI reserves the right to make corrections,enhancements, improvements and other changes to its TI Resources.You understand and agree that you remain responsible for using your independent analysis, evaluation and judgment in designing yourapplications and that you have full and exclusive responsibility to assure the safety of your applications and compliance of your applications(and of all TI products used in or for your applications) with all applicable regulations, laws and other applicable requirements. Yourepresent that, with respect to your applications, you have all the necessary expertise to create and implement safeguards that (1)anticipate dangerous consequences of failures, (2) monitor failures and their consequences, and (3) lessen the likelihood of failures thatmight cause harm and take appropriate actions. You agree that prior to using or distributing any applications that include TI products, youwill thoroughly test such applications and the functionality of such TI products as used in such applications. TI has not conducted anytesting other than that specifically described in the published documentation for a particular TI Resource.You are authorized to use, copy and modify any individual TI Resource only in connection with the development of applications that includethe TI product(s) identified in such TI Resource. NO OTHER LICENSE, EXPRESS OR IMPLIED, BY ESTOPPEL OR OTHERWISE TOANY OTHER TI INTELLECTUAL PROPERTY RIGHT, AND NO LICENSE TO ANY TECHNOLOGY OR INTELLECTUAL PROPERTYRIGHT OF TI OR ANY THIRD PARTY IS GRANTED HEREIN, including but not limited to any patent right, copyright, mask work right, orother intellectual property right relating to any combination, machine, or process in which TI products or services are used. Informationregarding or referencing third-party products or services does not constitute a license to use such products or services, or a warranty orendorsement thereof. Use of TI Resources may require a license from a third party under the patents or other intellectual property of thethird party, or a license from TI under the patents or other intellectual property of TI.TI RESOURCES ARE PROVIDED \u201cAS IS\u201d AND WITH ALL FAULTS. TI DISCLAIMS ALL OTHER WARRANTIES ORREPRESENTATIONS, EXPRESS OR IMPLIED, REGARDING TI RESOURCES OR USE THEREOF, INCLUDING BUT NOT LIMITED TOACCURACY OR COMPLETENESS, TITLE, ANY EPIDEMIC FAILURE WARRANTY AND ANY IMPLIED WARRANTIES OFMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT OF ANY THIRD PARTY INTELLECTUALPROPERTY RIGHTS.TI SHALL NOT BE LIABLE FOR AND SHALL NOT DEFEND OR INDEMNIFY YOU AGAINST ANY CLAIM, INCLUDING BUT NOTLIMITED TO ANY INFRINGEMENT CLAIM THAT RELATES TO OR IS BASED ON ANY COMBINATION OF PRODUCTS EVEN IFDESCRIBED IN TI RESOURCES OR OTHERWISE. IN NO EVENT SHALL TI BE LIABLE FOR ANY ACTUAL, DIRECT, SPECIAL,COLLATERAL, INDIRECT, PUNITIVE, INCIDENTAL, CONSEQUENTIAL OR EXEMPLARY DAMAGES IN CONNECTION WITH ORARISING OUT OF TI RESOURCES OR USE THEREOF, AND REGARDLESS OF WHETHER TI HAS BEEN ADVISED OF THEPOSSIBILITY OF SUCH DAMAGES.You agree to fully indemnify TI and its representatives against any damages, costs, losses, and/or liabilities arising out of your non-compliance with the terms and provisions of this Notice.This Notice applies to TI Resources. Additional terms apply to the use and purchase of certain types of materials, TI products and services.These include; without limitation, TI\u2019s standard terms for semiconductor products http://www.ti.com/sc/docs/stdterms.htm), evaluationmodules, and samples (http://www.ti.com/sc/docs/sampterms.htm).", "paragraph_id": 163}, {"text": "Mailing Address: Texas Instruments, Post Office Box 655303, Dallas, Texas 75265Copyright \u00a9 2018, Texas Instruments Incorporatedhttp://www.ti.com/sc/docs/stdterms.htmhttp://www.ti.com/lit/pdf/SSZZ027http://www.ti.com/lit/pdf/SSZZ027http://www.ti.com/sc/docs/sampterms.htm\tUnderstanding the I2C Bus\t1\u2002Electrical Characteristics\t1.1\u2002Open-Drain for Bidirectional Communication\t1.1.1\u2002Open-Drain Pulling Low\t1.1.2\u2002Open-Drain Releasing Bus\t2\u2002I2C Interface\t2.1\u2002General I2C Operation\t2.1.1\u2002START and STOP Conditions\t2.1.2\u2002Repeated START Condition\t2.2\u2002Data Validity and Byte Format\t2.3\u2002Acknowledge (ACK) and Not Acknowledge (NACK)\t3\u2002I2C Data\t3.1\u2002Writing to a Slave On The I2C Bus\t3.2\u2002Reading From a Slave On The I2C Bus\tImportant Notice", "paragraph_id": 164}]